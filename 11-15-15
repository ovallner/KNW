/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ardiunotest1;
import rxtxrobot.*;
/**
 *
 * @author oscar
 */
public class ArdiunoTest1 {

    /**
     * @param args the command line arguments
     */
    static int adjustSpeedLeft = 250;
    static int adjustSpeedRight = 250;
    public static RXTXRobot r;
    public static void main(String[] args) {
        //public static int adjustSpeed = 250;
        // TODO code application logic here
        r = new ArduinoNano();
        
        
        
        r.setPort("/dev/tty.wch ch341 USB=>RS232 fa140");
        
        
        
        r.connect();
        r.attachServo(RXTXRobot.SERVO1, 7);
        r.attachMotor(RXTXRobot.MOTOR1, 6);
        r.attachMotor(RXTXRobot.MOTOR2, 5);
       //r.attachGPS();
    /*  double[] coordinates = r.getGPSCoordinates();


    System.out.println("Degrees latitude: " + coordinates[0]);
    System.out.println("Minutes latitude: " + coordinates[1]);
    System.out.println("Degrees longitude: " + coordinates[2]);
    System.out.println("Minutes longitude: " + coordinates[3]); */ 
        runUntilBump();
        //rotate90Clockwise();
        //rotate90CounterClockwise();
        //threeMeter();
        //getDistanceFront();
        //getDistanceLeft();
        //getDistanceRight();
       // System.out.println("Conductivity reading is: " + r.getConductivity());
       // System.out.println("conductivity reading is: " + getAccurateConductivity());
        //r.moveServo(RXTXRobot.SERVO1, 180);
        //movesServo(0);
        //movesServo(0);
        //movesServo(0);
        //movesServo(0);
        //movesServo(180);
        //moveThreeMeters();
       // int thermistorReading = getThermistorReading(r);
        //double temp = ((thermistorReading - 904.4)/(-8.95));
        //System.out.println("The probe read the value: " + thermistorReading);
        //System.out.println("In volts: " + (thermistorReading * (5.0/1023.0)));
        //System.out.println("The temperature is: " + temp); 
        r.close();
    }
      public static int getThermistorReading(RXTXRobot r) {
        
        int sum = 0;
        int readingCount = 10;

         //Read the analog pin values ten times, adding to sum each time
         for (int i = 0; i < readingCount; i++) {

         //Refresh the analog pins so we get new readings
         r.refreshAnalogPins();
         int reading = r.getAnalogPin(2).getValue();
         sum += reading;
        }

        //Return the average reading
        return sum / readingCount;
    }
      public static void threeMeter()
    {	
		r.runMotor(RXTXRobot.MOTOR1, 500, RXTXRobot.MOTOR2, -500, 6500);
    }
    public static void movesServo(int angle)
    {
		//r.moveServo(RXTXRobot.SERVO1, 0); // Move Servo 1 to home
		//r.sleep(3000);
		r.moveServo(RXTXRobot.SERVO1, angle);
		r.sleep(1500);
                r.moveServo(RXTXRobot.SERVO1, angle);
                r.sleep(1500);
		//r.moveServo(RXTXRobot.SERVO1, 90);
               // r.sleep(1500);
    }
    public static void bumpSensor()
    {
		
		for (int i = 0; i < 50; i++)
                {
                    r.refreshAnalogPins();
                    System.out.println("BUMP: " + r.getAnalogPin(1).getValue());
                        
                }
    }
    public static void runUntilBump()
    {
        int bumpLeft = 1;
        int bumpRight = 1;
        r.runMotor(RXTXRobot.MOTOR1, -100, RXTXRobot.MOTOR2, 100, 0);
        while(bumpLeft != 0 && bumpRight != 0){
        while(bumpLeft!=0 && bumpRight != 0)
        {
             r.refreshAnalogPins();
             bumpLeft = r.getAnalogPin(2).getValue();
             r.refreshAnalogPins();
             bumpRight = r.getAnalogPin(3).getValue();            
        }
        r.runMotor(RXTXRobot.MOTOR1, 0, RXTXRobot.MOTOR2, 0, 0);
        r.refreshAnalogPins();
        bumpLeft = r.getAnalogPin(2).getValue();
        r.refreshAnalogPins();
        bumpRight = r.getAnalogPin(3).getValue();
        }
        if(bumpLeft == 0 && bumpRight != 0){
            bumpLeftAdjust();
        }
        if(bumpRight == 0 && bumpLeft != 0){
            bumpRightAdjust();
        }
        //r.moveServo(RXTXRobot.SERVO1, 180);
        
    }
    public static void bumpLeftAdjust(){
        System.out.println("bump left");
        r.sleep(1000);
        r.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, -300, 1000);
        r.sleep(200);
        r.runMotor(RXTXRobot.MOTOR1, -500, RXTXRobot.MOTOR2, -500, adjustSpeedLeft);
        adjustSpeedLeft -= 50;
        runUntilBump();
    }
    public static void bumpRightAdjust(){
        System.out.println("bump right");
        r.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, -300, 1000);
        r.sleep(200);
        r.runMotor(RXTXRobot.MOTOR1, 500, RXTXRobot.MOTOR2, 500, adjustSpeedRight);
        adjustSpeedRight -= 50;
        runUntilBump();
    }
    public static void getDistanceFront()
    {
        /*int sum = 0;
        for (int x = 0; x < 10; x++){
            r.refreshDigitalPins();
           sum += r.getPing(13);
        } */
      //r.refreshDigitalPins();
      System.out.println("Distance: " + r.getPing(11) + "cm");
    }
    public static void getDistanceLeft()
    {
        /*int sum = 0;
        for (int x = 0; x < 10; x++){
            r.refreshDigitalPins();
           sum += r.getPing(13);
        } */
      //r.refreshDigitalPins();
      System.out.println("Distance: " + r.getPing(10) + "cm");
    }
    public static void getDistanceRight()
    {
        /*int sum = 0;
        for (int x = 0; x < 10; x++){
            r.refreshDigitalPins();
           sum += r.getPing(13);
        } */
      //r.refreshDigitalPins();
      System.out.println("Distance: " + r.getPing(9) + "cm");
    }
    public static void moveThreeMeters(){
        r.runMotor(RXTXRobot.MOTOR1, -410 , RXTXRobot.MOTOR2, 500 , 12500);
    }
    public static double getAccurateConductivity(){
    
        int goodADC = (int)((r.getConductivity() - 1017.1)/(-13.874));
        int r = (-2000 * goodADC)/(goodADC -1);
        double conductivity = 1.588/ (4.03 * r);
        return conductivity;
    }
    public static void rotate90Clockwise(){
        r.sleep(1000);
        r.runMotor(RXTXRobot.MOTOR1, 500, RXTXRobot.MOTOR2, 500, 650);
    }
    public static void rotate90CounterClockwise(){
        r.sleep(1000);
        r.runMotor(RXTXRobot.MOTOR1, -500, RXTXRobot.MOTOR2, -500, 700);
    }
}
